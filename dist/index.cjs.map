{"version":3,"sources":["../src/lib/environment.ts","../src/lib/configs/service-config.ts","../src/lib/util.ts","../src/lib/http-status-codes.ts","../src/lib/configs/system-config.ts","../src/lib/config.ts","../src/lib/logger.ts","../src/lib/initialize.ts","../src/lib/server.ts","../src/lib/request/Request.ts","../src/lib/exceptions/Exception.ts","../src/lib/exceptions/APIException.ts","../src/api/consts/exceptions.ts","../src/lib/response/Response.ts","../src/lib/response/Body.ts","../src/lib/response/FailureBody.ts","../src/lib/consts/exceptions.ts","../src/api/routes/index.ts","../src/api/routes/images.ts","../src/api/controllers/core.ts","../src/api/controllers/images.ts","../src/api/routes/chat.ts","../src/api/controllers/chat.ts","../src/api/routes/ping.ts","../src/api/routes/token.ts","../src/api/routes/models.ts","../src/index.ts"],"sourcesContent":["import path from 'path';\n\nimport fs from 'fs-extra';\nimport minimist from 'minimist';\nimport _ from 'lodash';\n\nconst cmdArgs = minimist(process.argv.slice(2));  //获取命令行参数\nconst envVars = process.env;  //获取环境变量\n\nclass Environment {\n\n    /** 命令行参数 */\n    cmdArgs: any;\n    /** 环境变量 */\n    envVars: any;\n    /** 环境名称 */\n    env?: string;\n    /** 服务名称 */\n    name?: string;\n    /** 服务地址 */\n    host?: string;\n    /** 服务端口 */\n    port?: number;\n    /** 包参数 */\n    package: any;\n\n    constructor(options: any = {}) {\n        const { cmdArgs, envVars, package: _package } = options;\n        this.cmdArgs = cmdArgs;\n        this.envVars = envVars;\n        this.env = _.defaultTo(cmdArgs.env || envVars.SERVER_ENV, 'dev');\n        this.name = cmdArgs.name || envVars.SERVER_NAME || undefined;\n        this.host = cmdArgs.host || envVars.SERVER_HOST || undefined;\n        this.port = Number(cmdArgs.port || envVars.SERVER_PORT) ? Number(cmdArgs.port || envVars.SERVER_PORT) : undefined;\n        this.package = _package;\n    }\n\n}\n\nexport default new Environment({\n    cmdArgs,\n    envVars,\n    package: JSON.parse(fs.readFileSync(path.join(path.resolve(), \"package.json\")).toString())\n});","import path from 'path';\n\nimport fs from 'fs-extra';\nimport yaml from 'yaml';\nimport _ from 'lodash';\n\nimport environment from '../environment.ts';\nimport util from '../util.ts';\n\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/service.yml\");\n\n/**\n * 服务配置\n */\nexport class ServiceConfig {\n\n    /** 服务名称 */\n    name: string;\n    /** @type {string} 服务绑定主机地址 */\n    host;\n    /** @type {number} 服务绑定端口 */\n    port;\n    /** @type {string} 服务路由前缀 */\n    urlPrefix;\n    /** @type {string} 服务绑定地址（外部访问地址） */\n    bindAddress;\n\n    constructor(options?: any) {\n        const { name, host, port, urlPrefix, bindAddress } = options || {};\n        this.name = _.defaultTo(name, 'jimeng-free-api');\n        this.host = _.defaultTo(host, '0.0.0.0');\n        this.port = _.defaultTo(port, 5566);\n        this.urlPrefix = _.defaultTo(urlPrefix, '');\n        this.bindAddress = bindAddress;\n    }\n\n    get addressHost() {\n        if(this.bindAddress) return this.bindAddress;\n        const ipAddresses = util.getIPAddressesByIPv4();\n        for(let ipAddress of ipAddresses) {\n            if(ipAddress === this.host)\n                return ipAddress;\n        }\n        return ipAddresses[0] || \"127.0.0.1\";\n    }\n\n    get address() {\n        return `${this.addressHost}:${this.port}`;\n    }\n\n    get pageDirUrl() {\n        return `http://127.0.0.1:${this.port}/page`;\n    }\n\n    get publicDirUrl() {\n        return `http://127.0.0.1:${this.port}/public`;\n    }\n\n    static load() {\n        const external = _.pickBy(environment, (v, k) => [\"name\", \"host\", \"port\"].includes(k) && !_.isUndefined(v));\n        if(!fs.pathExistsSync(CONFIG_PATH)) return new ServiceConfig(external);\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\n        return new ServiceConfig({ ...data, ...external });\n    }\n\n}\n\nexport default ServiceConfig.load();","import os from \"os\";\nimport path from \"path\";\nimport crypto from \"crypto\";\nimport { Readable, Writable } from \"stream\";\n\nimport \"colors\";\nimport mime from \"mime\";\nimport axios from \"axios\";\nimport fs from \"fs-extra\";\nimport { v1 as uuid } from \"uuid\";\nimport { format as dateFormat } from \"date-fns\";\nimport CRC32 from \"crc-32\";\nimport randomstring from \"randomstring\";\nimport _ from \"lodash\";\nimport { CronJob } from \"cron\";\n\nimport HTTP_STATUS_CODE from \"./http-status-codes.ts\";\n\nconst autoIdMap = new Map();\n\nconst util = {\n  is2DArrays(value: any) {\n    return (\n      _.isArray(value) &&\n      (!value[0] || (_.isArray(value[0]) && _.isArray(value[value.length - 1])))\n    );\n  },\n\n  uuid: (separator = true) => (separator ? uuid() : uuid().replace(/\\-/g, \"\")),\n\n  autoId: (prefix = \"\") => {\n    let index = autoIdMap.get(prefix);\n    if (index > 999999) index = 0; //超过最大数字则重置为0\n    autoIdMap.set(prefix, (index || 0) + 1);\n    return `${prefix}${index || 1}`;\n  },\n\n  ignoreJSONParse(value: string) {\n    const result = _.attempt(() => JSON.parse(value));\n    if (_.isError(result)) return null;\n    return result;\n  },\n\n  generateRandomString(options: any): string {\n    return randomstring.generate(options);\n  },\n\n  getResponseContentType(value: any): string | null {\n    return value.headers\n      ? value.headers[\"content-type\"] || value.headers[\"Content-Type\"]\n      : null;\n  },\n\n  mimeToExtension(value: string) {\n    let extension = mime.getExtension(value);\n    if (extension == \"mpga\") return \"mp3\";\n    return extension;\n  },\n\n  extractURLExtension(value: string) {\n    const extname = path.extname(new URL(value).pathname);\n    return extname.substring(1).toLowerCase();\n  },\n\n  createCronJob(cronPatterns: any, callback?: Function) {\n    if (!_.isFunction(callback))\n      throw new Error(\"callback must be an Function\");\n    return new CronJob(\n      cronPatterns,\n      () => callback(),\n      null,\n      false,\n      \"Asia/Shanghai\"\n    );\n  },\n\n  getDateString(format = \"yyyy-MM-dd\", date = new Date()) {\n    return dateFormat(date, format);\n  },\n\n  getIPAddressesByIPv4(): string[] {\n    const interfaces = os.networkInterfaces();\n    const addresses = [];\n    for (let name in interfaces) {\n      const networks = interfaces[name];\n      const results = networks.filter(\n        (network) =>\n          network.family === \"IPv4\" &&\n          network.address !== \"127.0.0.1\" &&\n          !network.internal\n      );\n      if (results[0] && results[0].address) addresses.push(results[0].address);\n    }\n    return addresses;\n  },\n\n  getMACAddressesByIPv4(): string[] {\n    const interfaces = os.networkInterfaces();\n    const addresses = [];\n    for (let name in interfaces) {\n      const networks = interfaces[name];\n      const results = networks.filter(\n        (network) =>\n          network.family === \"IPv4\" &&\n          network.address !== \"127.0.0.1\" &&\n          !network.internal\n      );\n      if (results[0] && results[0].mac) addresses.push(results[0].mac);\n    }\n    return addresses;\n  },\n\n  generateSSEData(event?: string, data?: string, retry?: number) {\n    return `event: ${event || \"message\"}\\ndata: ${(data || \"\")\n      .replace(/\\n/g, \"\\\\n\")\n      .replace(/\\s/g, \"\\\\s\")}\\nretry: ${retry || 3000}\\n\\n`;\n  },\n\n  buildDataBASE64(type, ext, buffer) {\n    return `data:${type}/${ext.replace(\"jpg\", \"jpeg\")};base64,${buffer.toString(\n      \"base64\"\n    )}`;\n  },\n\n  isLinux() {\n    return os.platform() !== \"win32\";\n  },\n\n  isIPAddress(value) {\n    return (\n      _.isString(value) &&\n      (/^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/.test(\n        value\n      ) ||\n        /\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*/.test(\n          value\n        ))\n    );\n  },\n\n  isPort(value) {\n    return _.isNumber(value) && value > 0 && value < 65536;\n  },\n\n  isReadStream(value): boolean {\n    return (\n      value &&\n      (value instanceof Readable || \"readable\" in value || value.readable)\n    );\n  },\n\n  isWriteStream(value): boolean {\n    return (\n      value &&\n      (value instanceof Writable || \"writable\" in value || value.writable)\n    );\n  },\n\n  isHttpStatusCode(value) {\n    return _.isNumber(value) && Object.values(HTTP_STATUS_CODE).includes(value);\n  },\n\n  isURL(value) {\n    return !_.isUndefined(value) && /^(http|https)/.test(value);\n  },\n\n  isSrc(value) {\n    return !_.isUndefined(value) && /^\\/.+\\.[0-9a-zA-Z]+(\\?.+)?$/.test(value);\n  },\n\n  isBASE64(value) {\n    return !_.isUndefined(value) && /^[a-zA-Z0-9\\/\\+]+(=?)+$/.test(value);\n  },\n\n  isBASE64Data(value) {\n    return /^data:/.test(value);\n  },\n\n  extractBASE64DataFormat(value): string | null {\n    const match = value.trim().match(/^data:(.+);base64,/);\n    if (!match) return null;\n    return match[1];\n  },\n\n  removeBASE64DataHeader(value): string {\n    return value.replace(/^data:(.+);base64,/, \"\");\n  },\n\n  isDataString(value): boolean {\n    return /^(base64|json):/.test(value);\n  },\n\n  isStringNumber(value) {\n    return _.isFinite(Number(value));\n  },\n\n  isUnixTimestamp(value) {\n    return /^[0-9]{10}$/.test(`${value}`);\n  },\n\n  isTimestamp(value) {\n    return /^[0-9]{13}$/.test(`${value}`);\n  },\n\n  isEmail(value) {\n    return /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/.test(\n      value\n    );\n  },\n\n  isAsyncFunction(value) {\n    return Object.prototype.toString.call(value) === \"[object AsyncFunction]\";\n  },\n\n  async isAPNG(filePath) {\n    let head;\n    const readStream = fs.createReadStream(filePath, { start: 37, end: 40 });\n    const readPromise = new Promise((resolve, reject) => {\n      readStream.once(\"end\", resolve);\n      readStream.once(\"error\", reject);\n    });\n    readStream.once(\"data\", (data) => (head = data));\n    await readPromise;\n    return head.compare(Buffer.from([0x61, 0x63, 0x54, 0x4c])) === 0;\n  },\n\n  unixTimestamp() {\n    return parseInt(`${Date.now() / 1000}`);\n  },\n\n  timestamp() {\n    return Date.now();\n  },\n\n  urlJoin(...values) {\n    let url = \"\";\n    for (let i = 0; i < values.length; i++)\n      url += `${i > 0 ? \"/\" : \"\"}${values[i]\n        .replace(/^\\/*/, \"\")\n        .replace(/\\/*$/, \"\")}`;\n    return url;\n  },\n\n  millisecondsToHmss(milliseconds) {\n    if (_.isString(milliseconds)) return milliseconds;\n    milliseconds = parseInt(milliseconds);\n    const sec = Math.floor(milliseconds / 1000);\n    const hours = Math.floor(sec / 3600);\n    const minutes = Math.floor((sec - hours * 3600) / 60);\n    const seconds = sec - hours * 3600 - minutes * 60;\n    const ms = (milliseconds % 60000) - seconds * 1000;\n    return `${hours > 9 ? hours : \"0\" + hours}:${\n      minutes > 9 ? minutes : \"0\" + minutes\n    }:${seconds > 9 ? seconds : \"0\" + seconds}.${ms}`;\n  },\n\n  millisecondsToTimeString(milliseconds) {\n    if (milliseconds < 1000) return `${milliseconds}ms`;\n    if (milliseconds < 60000)\n      return `${parseFloat((milliseconds / 1000).toFixed(2))}s`;\n    return `${Math.floor(milliseconds / 1000 / 60)}m${Math.floor(\n      (milliseconds / 1000) % 60\n    )}s`;\n  },\n\n  rgbToHex(r, g, b): string {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  },\n\n  hexToRgb(hex) {\n    const value = parseInt(hex.replace(/^#/, \"\"), 16);\n    return [(value >> 16) & 255, (value >> 8) & 255, value & 255];\n  },\n\n  md5(value) {\n    return crypto.createHash(\"md5\").update(value).digest(\"hex\");\n  },\n\n  crc32(value) {\n    return _.isBuffer(value) ? CRC32.buf(value) : CRC32.str(value);\n  },\n\n  arrayParse(value): any[] {\n    return _.isArray(value) ? value : [value];\n  },\n\n  booleanParse(value) {\n    return value === \"true\" || value === true ? true : false;\n  },\n\n  encodeBASE64(value) {\n    return Buffer.from(value).toString(\"base64\");\n  },\n\n  decodeBASE64(value) {\n    return Buffer.from(value, \"base64\").toString();\n  },\n\n  async fetchFileBASE64(url: string) {\n    const result = await axios.get(url, {\n      responseType: \"arraybuffer\",\n    });\n    return result.data.toString(\"base64\");\n  },\n};\n\nexport default util;\n","export default {\n\n    CONTINUE: 100,  //客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应\n    SWITCHING_PROTOCOLS: 101,  //服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源\n    PROCESSING: 102,  //处理将被继续执行\n\n    OK: 200,  //请求已成功，请求所希望的响应头或数据体将随此响应返回\n    CREATED: 201,  //请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'\n    ACCEPTED: 202,  //服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成\n    NON_AUTHORITATIVE_INFO: 203,  //服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的\n    NO_CONTENT: 204,  //服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾\n    RESET_CONTENT: 205,  //服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束\n    PARTIAL_CONTENT: 206,  //服务器已经成功处理了部分 GET 请求。类似于FlashGet或者迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。响应必须包含如下的头部域：Content-Range 用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一段multipart中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。Date和ETag或Content-Location，假如同样的请求本应该返回200响应。Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。假如 ETag 或 Latest-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容\n    MULTIPLE_STATUS: 207,  //代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码\n\n    MULTIPLE_CHOICES: 300,  //被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的\n    MOVED_PERMANENTLY: 301,  //被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式\n    FOUND: 302,  //请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI应当在响应的 Location 域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应\n    SEE_OTHER: 303,  //对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。新的 URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。注意：许多 HTTP/1.1 版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的\n    NOT_MODIFIED: 304,  //如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。该响应必须包含以下的头信息：Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。ETag或 Content-Location，假如同样的请求本应返回200响应。Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值\n    USE_PROXY: 305,  //被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果\n    UNUSED: 306,  //在最新版的规范中，306状态码已经不再被使用\n    TEMPORARY_REDIRECT: 307,  //请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化\n\n    BAD_REQUEST: 400,  //1.语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求 2.请求参数有误\n    UNAUTHORIZED: 401,  //当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617\n    PAYMENT_REQUIRED: 402,  //该状态码是为了将来可能的需求而预留的\n    FORBIDDEN: 403,  //服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息\n    NOT_FOUND: 404,  //请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下\n    METHOD_NOT_ALLOWED: 405,  //请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误\n    NO_ACCEPTABLE: 406,  //请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准\n    PROXY_AUTHENTICATION_REQUIRED: 407,  //与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617\n    REQUEST_TIMEOUT: 408,  //请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改\n    CONFLICT: 409,  //由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本\n    GONE: 410,  //被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为'410 Gone'，以及是否需要保持此标记多长时间，完全取决于服务器拥有者\n    LENGTH_REQUIRED: 411,  //服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求 \n    PRECONDITION_FAILED: 412,  //服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上\n    REQUEST_ENTITY_TOO_LARGE: 413,  //服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试\n    REQUEST_URI_TOO_LONG: 414,  //请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。重定向URI “黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码\n    UNSUPPORTED_MEDIA_TYPE: 415,  //对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝\n    REQUESTED_RANGE_NOT_SATISFIABLE: 416,  //如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其 Content-Type\n    EXPECTION_FAILED: 417,  //在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足\n    TOO_MANY_CONNECTIONS: 421,  //从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户\n    UNPROCESSABLE_ENTITY: 422,  //请求格式正确，但是由于含有语义错误，无法响应\n    FAILED_DEPENDENCY: 424,  //由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH\n    UNORDERED_COLLECTION: 425,  //在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中\n    UPGRADE_REQUIRED: 426,  //客户端应当切换到TLS/1.0\n    RETRY_WITH: 449,  //由微软扩展，代表请求应当在执行完适当的操作后进行重试\n\n    INTERNAL_SERVER_ERROR: 500,  //服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现\n    NOT_IMPLEMENTED: 501, //服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求\n    BAD_GATEWAY: 502, //作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应\n    SERVICE_UNAVAILABLE: 503,  //由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接\n    GATEWAY_TIMEOUT: 504,  //作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。注意：某些代理服务器在DNS查询超时时会返回400或者500错误\n    HTTP_VERSION_NOT_SUPPORTED: 505,  //服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体\n    VARIANT_ALSO_NEGOTIATES: 506,  //服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点\n    INSUFFICIENT_STORAGE: 507,  //服务器无法存储完成请求所必须的内容。这个状况被认为是临时的\n    BANDWIDTH_LIMIT_EXCEEDED: 509,  //服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用\n    NOT_EXTENDED: 510  //获取资源所需要的策略并没有没满足\n\n};","import path from 'path';\n\nimport fs from 'fs-extra';\nimport yaml from 'yaml';\nimport _ from 'lodash';\n\nimport environment from '../environment.ts';\n\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/system.yml\");\n\n/**\n * 系统配置\n */\nexport class SystemConfig {\n\n    /** 是否开启请求日志 */\n    requestLog: boolean;\n    /** 临时目录路径 */\n    tmpDir: string;\n    /** 日志目录路径 */\n    logDir: string;\n    /** 日志写入间隔（毫秒） */\n    logWriteInterval: number;\n    /** 日志文件有效期（毫秒） */\n    logFileExpires: number;\n    /** 公共目录路径 */\n    publicDir: string;\n    /** 临时文件有效期（毫秒） */\n    tmpFileExpires: number;\n    /** 请求体配置 */\n    requestBody: any;\n    /** 是否调试模式 */\n    debug: boolean;\n\n    constructor(options?: any) {\n        const { requestLog, tmpDir, logDir, logWriteInterval, logFileExpires, publicDir, tmpFileExpires, requestBody, debug } = options || {};\n        this.requestLog = _.defaultTo(requestLog, false);\n        this.tmpDir = _.defaultTo(tmpDir, './tmp');\n        this.logDir = _.defaultTo(logDir, './logs');\n        this.logWriteInterval = _.defaultTo(logWriteInterval, 200);\n        this.logFileExpires = _.defaultTo(logFileExpires, 2626560000);\n        this.publicDir = _.defaultTo(publicDir, './public');\n        this.tmpFileExpires = _.defaultTo(tmpFileExpires, 86400000);\n        this.requestBody = Object.assign(requestBody || {}, {\n            enableTypes: ['json', 'form', 'text', 'xml'],\n            encoding: 'utf-8',\n            formLimit: '100mb',\n            jsonLimit: '100mb',\n            textLimit: '100mb',\n            xmlLimit: '100mb',\n            formidable: {\n                maxFileSize: '100mb'\n            },\n            multipart: true,\n            parsedMethods: ['POST', 'PUT', 'PATCH']\n        });\n        this.debug = _.defaultTo(debug, true);\n    }\n\n    get rootDirPath() {\n        return path.resolve();\n    }\n\n    get tmpDirPath() {\n        return path.resolve(this.tmpDir);\n    }\n\n    get logDirPath() {\n        return path.resolve(this.logDir);\n    }\n\n    get publicDirPath() {\n        return path.resolve(this.publicDir);\n    }\n\n    static load() {\n        if (!fs.pathExistsSync(CONFIG_PATH)) return new SystemConfig();\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\n        return new SystemConfig(data);\n    }\n\n}\n\nexport default SystemConfig.load();","import serviceConfig from \"./configs/service-config.ts\";\nimport systemConfig from \"./configs/system-config.ts\";\n\nclass Config {\n    \n    /** 服务配置 */\n    service = serviceConfig;\n    \n    /** 系统配置 */\n    system = systemConfig;\n\n}\n\nexport default new Config();","import path from 'path';\nimport _util from 'util';\n\nimport 'colors';\nimport _ from 'lodash';\nimport fs from 'fs-extra';\nimport { format as dateFormat } from 'date-fns';\n\nimport config from './config.ts';\nimport util from './util.ts';\n\nconst isVercelEnv = process.env.VERCEL;\n\nclass LogWriter {\n\n    #buffers = [];\n\n    constructor() {\n        !isVercelEnv && fs.ensureDirSync(config.system.logDirPath);\n        !isVercelEnv && this.work();\n    }\n\n    push(content) {\n        const buffer = Buffer.from(content);\n        this.#buffers.push(buffer);\n    }\n\n    writeSync(buffer) {\n        !isVercelEnv && fs.appendFileSync(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), buffer);\n    }\n\n    async write(buffer) {\n        !isVercelEnv && await fs.appendFile(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), buffer);\n    }\n\n    flush() {\n        if(!this.#buffers.length) return;\n        !isVercelEnv && fs.appendFileSync(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), Buffer.concat(this.#buffers));\n    }\n\n    work() {\n        if (!this.#buffers.length) return setTimeout(this.work.bind(this), config.system.logWriteInterval);\n        const buffer = Buffer.concat(this.#buffers);\n        this.#buffers = [];\n        this.write(buffer)\n        .finally(() => setTimeout(this.work.bind(this), config.system.logWriteInterval))\n        .catch(err => console.error(\"Log write error:\", err));\n    }\n\n}\n\nclass LogText {\n\n    /** @type {string} 日志级别 */\n    level;\n    /** @type {string} 日志文本 */\n    text;\n    /** @type {string} 日志来源 */\n    source;\n    /** @type {Date} 日志发生时间 */\n    time = new Date();\n\n    constructor(level, ...params) {\n        this.level = level;\n        this.text = _util.format.apply(null, params);\n        this.source = this.#getStackTopCodeInfo();\n    }\n\n    #getStackTopCodeInfo() {\n        const unknownInfo = { name: \"unknown\", codeLine: 0, codeColumn: 0 };\n        const stackArray = new Error().stack.split(\"\\n\");\n        const text = stackArray[4];\n        if (!text)\n            return unknownInfo;\n        const match = text.match(/at (.+) \\((.+)\\)/) || text.match(/at (.+)/);\n        if (!match || !_.isString(match[2] || match[1]))\n            return unknownInfo;\n        const temp = match[2] || match[1];\n        const _match = temp.match(/([a-zA-Z0-9_\\-\\.]+)\\:(\\d+)\\:(\\d+)$/);\n        if (!_match)\n            return unknownInfo;\n        const [, scriptPath, codeLine, codeColumn] = _match as any;\n        return {\n            name: scriptPath ? scriptPath.replace(/.js$/, \"\") : \"unknown\",\n            path: scriptPath || null,\n            codeLine: parseInt(codeLine || 0),\n            codeColumn: parseInt(codeColumn || 0)\n        };\n    }\n\n    toString() {\n        return `[${dateFormat(this.time, \"yyyy-MM-dd HH:mm:ss.SSS\")}][${this.level}][${this.source.name}<${this.source.codeLine},${this.source.codeColumn}>] ${this.text}`;\n    }\n\n}\n\nclass Logger {\n\n    /** @type {Object} 系统配置 */\n    config = {};\n    /** @type {Object} 日志级别映射 */\n    static Level = {\n        Success: \"success\",\n        Info: \"info\",\n        Log: \"log\",\n        Debug: \"debug\",\n        Warning: \"warning\",\n        Error: \"error\",\n        Fatal: \"fatal\"\n    };\n    /** @type {Object} 日志级别文本颜色樱色 */\n    static LevelColor = {\n        [Logger.Level.Success]: \"green\",\n        [Logger.Level.Info]: \"brightCyan\",\n        [Logger.Level.Debug]: \"white\",\n        [Logger.Level.Warning]: \"brightYellow\",\n        [Logger.Level.Error]: \"brightRed\",\n        [Logger.Level.Fatal]: \"red\"\n    };\n    #writer;\n\n    constructor() {\n        this.#writer = new LogWriter();\n    }\n\n    header() {\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG START ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\n    }\n\n    footer() {\n        this.#writer.flush();  //将未写入文件的日志缓存写入\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG END ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\n    }\n\n    success(...params) {\n        const content = new LogText(Logger.Level.Success, ...params).toString();\n        console.info(content[Logger.LevelColor[Logger.Level.Success]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    info(...params) {\n        const content = new LogText(Logger.Level.Info, ...params).toString();\n        console.info(content[Logger.LevelColor[Logger.Level.Info]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    log(...params) {\n        const content = new LogText(Logger.Level.Log, ...params).toString();\n        console.log(content[Logger.LevelColor[Logger.Level.Log]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    debug(...params) {\n        if(!config.system.debug) return;  //非调试模式忽略debug\n        const content = new LogText(Logger.Level.Debug, ...params).toString();\n        console.debug(content[Logger.LevelColor[Logger.Level.Debug]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    warn(...params) {\n        const content = new LogText(Logger.Level.Warning, ...params).toString();\n        console.warn(content[Logger.LevelColor[Logger.Level.Warning]]);\n        this.#writer.push(content + \"\\n\");\n    }\n\n    error(...params) {\n        const content = new LogText(Logger.Level.Error, ...params).toString();\n        console.error(content[Logger.LevelColor[Logger.Level.Error]]);\n        this.#writer.push(content);\n    }\n\n    fatal(...params) {\n        const content = new LogText(Logger.Level.Fatal, ...params).toString();\n        console.error(content[Logger.LevelColor[Logger.Level.Fatal]]);\n        this.#writer.push(content);\n    }\n\n    destory() {\n        this.#writer.destory();\n    }\n\n}\n\nexport default new Logger();","import logger from './logger.js';\n\n// 允许无限量的监听器\nprocess.setMaxListeners(Infinity);\n// 输出未捕获异常\nprocess.on(\"uncaughtException\", (err, origin) => {\n    logger.error(`An unhandled error occurred: ${origin}`, err);\n});\n// 输出未处理的Promise.reject\nprocess.on(\"unhandledRejection\", (_, promise) => {\n    promise.catch(err => logger.error(\"An unhandled rejection occurred:\", err));\n});\n// 输出系统警告信息\nprocess.on(\"warning\", warning => logger.warn(\"System warning: \", warning));\n// 进程退出监听\nprocess.on(\"exit\", () => {\n    logger.info(\"Service exit\");\n    logger.footer();\n});\n// 进程被kill\nprocess.on(\"SIGTERM\", () => {\n    logger.warn(\"received kill signal\");\n    process.exit(2);\n});\n// Ctrl-C进程退出\nprocess.on(\"SIGINT\", () => {\n    process.exit(0);\n});","import Koa from 'koa';\nimport KoaRouter from 'koa-router';\nimport koaRange from 'koa-range';\nimport koaCors from \"koa2-cors\";\nimport koaBody from 'koa-body';\nimport _ from 'lodash';\n\nimport Exception from './exceptions/Exception.ts';\nimport Request from './request/Request.ts';\nimport Response from './response/Response.js';\nimport FailureBody from './response/FailureBody.ts';\nimport EX from './consts/exceptions.ts';\nimport logger from './logger.ts';\nimport config from './config.ts';\n\nclass Server {\n\n    app;\n    router;\n    \n    constructor() {\n        this.app = new Koa();\n        this.app.use(koaCors());\n        // 范围请求支持\n        this.app.use(koaRange);\n        this.router = new KoaRouter({ prefix: config.service.urlPrefix });\n        // 前置处理异常拦截\n        this.app.use(async (ctx: any, next: Function) => {\n            if(ctx.request.type === \"application/xml\" || ctx.request.type === \"application/ssml+xml\")\n                ctx.req.headers[\"content-type\"] = \"text/xml\";\n            try { await next() }\n            catch (err) {\n                logger.error(err);\n                const failureBody = new FailureBody(err);\n                new Response(failureBody).injectTo(ctx);\n            }\n        });\n        // 载荷解析器支持\n        this.app.use(koaBody(_.clone(config.system.requestBody)));\n        this.app.on(\"error\", (err: any) => {\n            // 忽略连接重试、中断、管道、取消错误\n            if ([\"ECONNRESET\", \"ECONNABORTED\", \"EPIPE\", \"ECANCELED\"].includes(err.code)) return;\n            logger.error(err);\n        });\n        logger.success(\"Server initialized\");\n    }\n\n    /**\n     * 附加路由\n     * \n     * @param routes 路由列表\n     */\n    attachRoutes(routes: any[]) {\n        routes.forEach((route: any) => {\n            const prefix = route.prefix || \"\";\n            for (let method in route) {\n                if(method === \"prefix\") continue;\n                if (!_.isObject(route[method])) {\n                    logger.warn(`Router ${prefix} ${method} invalid`);\n                    continue;\n                }\n                for (let uri in route[method]) {\n                    this.router[method](`${prefix}${uri}`, async ctx => {\n                        const { request, response } = await this.#requestProcessing(ctx, route[method][uri]);\n                        if(response != null && config.system.requestLog)\n                            logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\n                    });\n                }\n            }\n            logger.info(`Route ${config.service.urlPrefix || \"\"}${prefix} attached`);\n        });\n        this.app.use(this.router.routes());\n        this.app.use((ctx: any) => {\n            const request = new Request(ctx);\n            logger.debug(`-> ${ctx.request.method} ${ctx.request.url} request is not supported - ${request.remoteIP || \"unknown\"}`);\n            // const failureBody = new FailureBody(new Exception(EX.SYSTEM_NOT_ROUTE_MATCHING, \"Request is not supported\"));\n            // const response = new Response(failureBody);\n            const message = `[请求有误]: 正确请求为 POST -> /v1/chat/completions，当前请求为 ${ctx.request.method} -> ${ctx.request.url} 请纠正`;\n            logger.warn(message);\n            const failureBody = new FailureBody(new Error(message));\n            const response = new Response(failureBody);\n            response.injectTo(ctx);\n            if(config.system.requestLog)\n                logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\n        });\n    }\n\n    /**\n     * 请求处理\n     * \n     * @param ctx 上下文\n     * @param routeFn 路由方法\n     */\n    #requestProcessing(ctx: any, routeFn: Function): Promise<any> {\n        return new Promise(resolve => {\n            const request = new Request(ctx);\n            try {\n                if(config.system.requestLog)\n                    logger.info(`-> ${request.method} ${request.url}`);\n                    routeFn(request)\n                .then(response => {\n                    try {\n                        if(!Response.isInstance(response)) {\n                            const _response = new Response(response);\n                            _response.injectTo(ctx);\n                            return resolve({ request, response: _response });\n                        }\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                    catch(err) {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                })\n                .catch(err => {\n                    try {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                    catch(err) {\n                        logger.error(err);\n                        const failureBody = new FailureBody(err);\n                        const response = new Response(failureBody);\n                        response.injectTo(ctx);\n                        resolve({ request, response });\n                    }\n                });\n            }\n            catch(err) {\n                logger.error(err);\n                const failureBody = new FailureBody(err);\n                const response = new Response(failureBody);\n                response.injectTo(ctx);\n                resolve({ request, response });\n            }\n        });\n    }\n\n    /**\n     * 监听端口\n     */\n    async listen() {\n        const host = config.service.host;\n        const port = config.service.port;\n        await Promise.all([\n            new Promise((resolve, reject) => {\n                if(host === \"0.0.0.0\" || host === \"localhost\" || host === \"127.0.0.1\")\n                    return resolve(null);\n                this.app.listen(port, \"localhost\", err => {\n                    if(err) return reject(err);\n                    resolve(null);\n                });\n            }),\n            new Promise((resolve, reject) => {\n                this.app.listen(port, host, err => {\n                    if(err) return reject(err);\n                    resolve(null);\n                });\n            })\n        ]);\n        logger.success(`Server listening on port ${port} (${host})`);\n    }\n\n}\n\nexport default new Server();","import _ from 'lodash';\n\nimport APIException from '@/lib/exceptions/APIException.ts';\nimport EX from '@/api/consts/exceptions.ts';\nimport logger from '@/lib/logger.ts';\nimport util from '@/lib/util.ts';\n\nexport interface RequestOptions {\n    time?: number;\n}\n\nexport default class Request {\n\n    /** 请求方法 */\n    method: string;\n    /** 请求URL */\n    url: string;\n    /** 请求路径 */\n    path: string;\n    /** 请求载荷类型 */\n    type: string;\n    /** 请求headers */\n    headers: any;\n    /** 请求原始查询字符串 */\n    search: string;\n    /** 请求查询参数 */\n    query: any;\n    /** 请求URL参数 */\n    params: any;\n    /** 请求载荷 */\n    body: any;\n    /** 上传的文件 */\n    files: any[];\n    /** 客户端IP地址 */\n    remoteIP: string | null;\n    /** 请求接受时间戳（毫秒） */\n    time: number;\n\n    constructor(ctx, options: RequestOptions = {}) {\n        const { time } = options;\n        this.method = ctx.request.method;\n        this.url = ctx.request.url;\n        this.path = ctx.request.path;\n        this.type = ctx.request.type;\n        this.headers = ctx.request.headers || {};\n        this.search = ctx.request.search;\n        this.query = ctx.query || {};\n        this.params = ctx.params || {};\n        this.body = ctx.request.body || {};\n        this.files = ctx.request.files || {};\n        this.remoteIP = this.headers[\"X-Real-IP\"] || this.headers[\"x-real-ip\"] || this.headers[\"X-Forwarded-For\"] || this.headers[\"x-forwarded-for\"] || ctx.ip || null;\n        this.time = Number(_.defaultTo(time, util.timestamp()));\n    }\n\n    validate(key: string, fn?: Function, message?: string) {\n        try {\n            const value = _.get(this, key);\n            if (fn) {\n                if (fn(value) === false)\n                    throw `[Mismatch] -> ${fn}`;\n            }\n            else if (_.isUndefined(value))\n                throw '[Undefined]';\n        }\n        catch (err) {\n            logger.warn(`Params ${key} invalid:`, err);\n            throw new APIException(EX.API_REQUEST_PARAMS_INVALID, message || `Params ${key} invalid`);\n        }\n        return this;\n    }\n\n}","import assert from 'assert';\n\nimport _ from 'lodash';\n\nexport default class Exception extends Error {\n\n    /** 错误码 */\n    errcode: number;\n    /** 错误消息 */\n    errmsg: string;\n    /** 数据 */\n    data: any;\n    /** HTTP状态码 */\n    httpStatusCode: number;\n\n    /**\n     * 构造异常\n     * \n     * @param exception 异常\n     * @param _errmsg 异常消息\n     */\n    constructor(exception: (string | number)[], _errmsg?: string) {\n        assert(_.isArray(exception), 'Exception must be Array');\n        const [errcode, errmsg] = exception as [number, string];\n        assert(_.isFinite(errcode), 'Exception errcode invalid');\n        assert(_.isString(errmsg), 'Exception errmsg invalid');\n        super(_errmsg || errmsg);\n        this.errcode = errcode;\n        this.errmsg = _errmsg || errmsg;\n    }\n\n    compare(exception: (string | number)[]) {\n        const [errcode] = exception as [number, string];\n        return this.errcode == errcode;\n    }\n\n    setHTTPStatusCode(value: number) {\n        this.httpStatusCode = value;\n        return this;\n    }\n\n    setData(value: any) {\n        this.data = _.defaultTo(value, null);\n        return this;\n    }\n\n}","import Exception from './Exception.js';\n\nexport default class APIException extends Exception {\n\n    /**\n     * 构造异常\n     * \n     * @param {[number, string]} exception 异常\n     */\n    constructor(exception: (string | number)[], errmsg?: string) {\n        super(exception, errmsg);\n    }\n\n}","export default {\n    API_TEST: [-9999, 'API异常错误'],\n    API_REQUEST_PARAMS_INVALID: [-2000, '请求参数非法'],\n    API_REQUEST_FAILED: [-2001, '请求失败'],\n    API_TOKEN_EXPIRES: [-2002, 'Token已失效'],\n    API_FILE_URL_INVALID: [-2003, '远程文件URL非法'],\n    API_FILE_EXECEEDS_SIZE: [-2004, '远程文件超出大小'],\n    API_CHAT_STREAM_PUSHING: [-2005, '已有对话流正在输出'],\n    API_CONTENT_FILTERED: [-2006, '内容由于合规问题已被阻止生成'],\n    API_IMAGE_GENERATION_FAILED: [-2007, '图像生成失败'],\n    API_VIDEO_GENERATION_FAILED: [-2008, '视频生成失败'],\n    API_IMAGE_GENERATION_INSUFFICIENT_POINTS: [-2009, '即梦积分不足'],\n}","import mime from 'mime';\nimport _ from 'lodash';\n\nimport Body from './Body.ts';\nimport util from '../util.ts';\n\nexport interface ResponseOptions {\n    statusCode?: number;\n    type?: string;\n    headers?: Record<string, any>;\n    redirect?: string;\n    body?: any;\n    size?: number;\n    time?: number;\n}\n\nexport default class Response {\n\n    /** 响应HTTP状态码 */\n    statusCode: number;\n    /** 响应内容类型 */\n    type: string;\n    /** 响应headers */\n    headers: Record<string, any>;\n    /** 重定向目标 */\n    redirect: string;\n    /** 响应载荷 */\n    body: any;\n    /** 响应载荷大小 */\n    size: number;\n    /** 响应时间戳 */\n    time: number;\n\n    constructor(body: any, options: ResponseOptions = {}) {\n        const { statusCode, type, headers, redirect, size, time } = options;\n        this.statusCode = Number(_.defaultTo(statusCode, Body.isInstance(body) ? body.statusCode : undefined))\n        this.type = type;\n        this.headers = headers;\n        this.redirect = redirect;\n        this.size = size;\n        this.time = Number(_.defaultTo(time, util.timestamp()));\n        this.body = body;\n    }\n\n    injectTo(ctx) {\n        this.redirect && ctx.redirect(this.redirect);\n        this.statusCode && (ctx.status = this.statusCode);\n        this.type && (ctx.type = mime.getType(this.type) || this.type);\n        const headers = this.headers || {};\n        if(this.size && !headers[\"Content-Length\"] && !headers[\"content-length\"])\n            headers[\"Content-Length\"] = this.size;\n        ctx.set(headers);\n        if(Body.isInstance(this.body))\n            ctx.body = this.body.toObject();\n        else\n            ctx.body = this.body;\n    }\n\n    static isInstance(value) {\n        return value instanceof Response;\n    }\n\n}","import  _ from 'lodash';\n\nexport interface BodyOptions {\n    code?: number;\n    message?: string;\n    data?: any;\n    statusCode?: number;\n}\n\nexport default class Body {\n\n    /** 状态码 */\n    code: number;\n    /** 状态消息 */\n    message: string;\n    /** 载荷 */\n    data: any;\n    /** HTTP状态码 */\n    statusCode: number;\n\n    constructor(options: BodyOptions = {}) {\n        const { code, message, data, statusCode } = options;\n        this.code = Number(_.defaultTo(code, 0));\n        this.message = _.defaultTo(message, 'OK');\n        this.data = _.defaultTo(data, null);\n        this.statusCode = Number(_.defaultTo(statusCode, 200));\n    }\n\n    toObject() {\n        return {\n            code: this.code,\n            message: this.message,\n            data: this.data\n        };\n    }\n\n    static isInstance(value) {\n        return value instanceof Body;\n    }\n\n}","import _ from 'lodash';\n\nimport Body from './Body.ts';\nimport Exception from '../exceptions/Exception.ts';\nimport APIException from '../exceptions/APIException.ts';\nimport EX from '../consts/exceptions.ts';\nimport HTTP_STATUS_CODES from '../http-status-codes.ts';\n\nexport default class FailureBody extends Body {\n    \n    constructor(error: APIException | Exception | Error, _data?: any) {\n        let errcode, errmsg, data = _data, httpStatusCode = HTTP_STATUS_CODES.OK;;\n        if(_.isString(error))\n            error = new Exception(EX.SYSTEM_ERROR, error);\n        else if(error instanceof APIException || error instanceof Exception)\n            ({ errcode, errmsg, data, httpStatusCode } = error);\n        else if(_.isError(error))\n        ({ errcode, errmsg, data, httpStatusCode } = new Exception(EX.SYSTEM_ERROR, error.message));\n        super({\n            code: errcode || -1,\n            message: errmsg || 'Internal error',\n            data,\n            statusCode: httpStatusCode\n        });\n    }\n\n    static isInstance(value) {\n        return value instanceof FailureBody;\n    }\n\n}","export default {\n    SYSTEM_ERROR: [-1000, '系统异常'],\n    SYSTEM_REQUEST_VALIDATION_ERROR: [-1001, '请求参数校验错误'],\n    SYSTEM_NOT_ROUTE_MATCHING: [-1002, '无匹配的路由']\n} as Record<string, [number, string]>","import fs from 'fs-extra';\n\nimport Response from '@/lib/response/Response.ts';\nimport images from \"./images.ts\";\nimport chat from \"./chat.ts\";\nimport ping from \"./ping.ts\";\nimport token from './token.js';\nimport models from './models.ts';\n\nexport default [\n    {\n        get: {\n            '/': async () => {\n                const content = await fs.readFile('public/welcome.html');\n                return new Response(content, {\n                    type: 'html',\n                    headers: {\n                        Expires: '-1'\n                    }\n                });\n            }\n        }\n    },\n    images,\n    chat,\n    ping,\n    token,\n    models\n];","import _ from \"lodash\";\n\nimport Request from \"@/lib/request/Request.ts\";\nimport { generateImages, getImageByHistoryId } from \"@/api/controllers/images.ts\";\nimport { tokenSplit } from \"@/api/controllers/core.ts\";\nimport util from \"@/lib/util.ts\";\n\nexport default {\n  prefix: \"/v1/images\",\n\n  post: {\n    \"/generations\": async (request: Request) => {\n      request\n        .validate(\"body.model\", v => _.isUndefined(v) || _.isString(v))\n        .validate(\"body.prompt\", _.isString)\n        .validate(\"body.negative_prompt\", v => _.isUndefined(v) || _.isString(v))\n        .validate(\"body.width\", v => _.isUndefined(v) || _.isFinite(v))\n        .validate(\"body.height\", v => _.isUndefined(v) || _.isFinite(v))\n        .validate(\"body.sample_strength\", v => _.isUndefined(v) || _.isFinite(v))\n        .validate(\"body.response_format\", v => _.isUndefined(v) || _.isString(v))\n        .validate(\"headers.authorization\", _.isString);\n      // refresh_token切分\n      const tokens = tokenSplit(request.headers.authorization);\n      // 随机挑选一个refresh_token\n      const token = _.sample(tokens);\n      const {\n        model,\n        prompt,\n        negative_prompt: negativePrompt,\n        width,\n        height,\n        sample_strength: sampleStrength,\n        response_format,\n      } = request.body;\n      \n      const result = await generateImages(model, prompt, {\n        width,\n        height,\n        sampleStrength,\n        negativePrompt,\n      }, token);\n\n      return {\n        created: util.unixTimestamp(),\n        data: result\n      };\n    },\n\n    \"/get_history_by_ids\": async (request: Request) => {\n      request\n        .validate(\"body.history_ids\", v => _.isString(v) || _.isArray(v))\n        .validate(\"headers.authorization\", _.isString);\n\n      const tokens = tokenSplit(request.headers.authorization);\n      const token = _.sample(tokens);\n      const { history_ids } = request.body;\n\n      // 如果history_ids是字符串，转换为数组\n      const historyIds = _.isString(history_ids) ? [history_ids] : history_ids;\n\n      const result = await getImageByHistoryId(historyIds[0], token);\n      return {\n        created: util.unixTimestamp(),\n        data: result.images\n      };\n    }\n  },\n};\n","import { PassThrough } from \"stream\";\nimport path from \"path\";\nimport _ from \"lodash\";\nimport mime from \"mime\";\nimport axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\n\nimport APIException from \"@/lib/exceptions/APIException.ts\";\nimport EX from \"@/api/consts/exceptions.ts\";\nimport { createParser } from \"eventsource-parser\";\nimport logger from \"@/lib/logger.ts\";\nimport util from \"@/lib/util.ts\";\n\n// 模型名称\nconst MODEL_NAME = \"jimeng\";\n// 默认的AgentID\nconst DEFAULT_ASSISTANT_ID = \"513695\";\n// 版本号\nconst VERSION_CODE = \"5.8.0\";\n// 平台代码\nconst PLATFORM_CODE = \"7\";\n// 设备ID\nconst DEVICE_ID = Math.random() * 999999999999999999 + 7000000000000000000;\n// WebID\nconst WEB_ID = Math.random() * 999999999999999999 + 7000000000000000000;\n// 用户ID\nconst USER_ID = util.uuid(false);\n// 最大重试次数\nconst MAX_RETRY_COUNT = 3;\n// 重试延迟\nconst RETRY_DELAY = 5000;\n// 伪装headers\nconst FAKE_HEADERS = {\n  Accept: \"application/json, text/plain, */*\",\n  \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n  \"Accept-language\": \"zh-CN,zh;q=0.9\",\n  \"Cache-control\": \"no-cache\",\n  \"Last-event-id\": \"undefined\",\n  Appid: DEFAULT_ASSISTANT_ID,\n  Appvr: VERSION_CODE,\n  Origin: \"https://jimeng.jianying.com\",\n  Pragma: \"no-cache\",\n  Priority: \"u=1, i\",\n  Referer: \"https://jimeng.jianying.com\",\n  Pf: PLATFORM_CODE,\n  \"Sec-Ch-Ua\":\n    '\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"',\n  \"Sec-Ch-Ua-Mobile\": \"?0\",\n  \"Sec-Ch-Ua-Platform\": '\"Windows\"',\n  \"Sec-Fetch-Dest\": \"empty\",\n  \"Sec-Fetch-Mode\": \"cors\",\n  \"Sec-Fetch-Site\": \"same-origin\",\n  \"User-Agent\":\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n};\n// 文件最大大小\nconst FILE_MAX_SIZE = 100 * 1024 * 1024;\n\n/**\n * 获取缓存中的access_token\n *\n * 目前jimeng的access_token是固定的，暂无刷新功能\n *\n * @param refreshToken 用于刷新access_token的refresh_token\n */\nexport async function acquireToken(refreshToken: string): Promise<string> {\n  return refreshToken;\n}\n\n/**\n * 生成cookie\n */\nexport function generateCookie(refreshToken: string) {\n  const timestamp = util.unixTimestamp();\n  const sidGuard = `${refreshToken}%7C${timestamp}%7C5184000%7CMon%2C+03-Feb-2025+08%3A17%3A09+GMT`;\n  const sidUcpV1 = `1.0.0-${util.md5(util.uuid())}`;\n  const ttwid = `1|${util.md5(util.uuid())}|${timestamp}|${util.md5(util.uuid())}`;\n  \n  return [\n    `_tea_web_id=${WEB_ID}`,\n    `is_staff_user=false`,\n    `store-region=cn-gd`,\n    `store-region-src=uid`,\n    `sid_guard=${sidGuard}`,\n    `uid_tt=${USER_ID}`,\n    `uid_tt_ss=${USER_ID}`,\n    `sid_tt=${refreshToken}`,\n    `sessionid=${refreshToken}`,\n    `sessionid_ss=${refreshToken}`,\n    `sid_ucp_v1=${sidUcpV1}`,\n    `ssid_ucp_v1=${sidUcpV1}`,\n    `ttwid=${ttwid}`,\n    `fpk1=${util.md5(util.uuid())}`,\n    `odin_tt=${util.md5(util.uuid())}`\n  ].join(\"; \");\n}\n\n/**\n * 获取积分信息\n *\n * @param refreshToken 用于刷新access_token的refresh_token\n */\nexport async function getCredit(refreshToken: string) {\n  const {\n    credit: { gift_credit, purchase_credit, vip_credit }\n  } = await request(\"POST\", \"/commerce/v1/benefits/user_credit\", refreshToken, {\n    data: {},\n    headers: {\n      // Cookie: 'x-web-secsdk-uid=ef44bd0d-0cf6-448c-b517-fd1b5a7267ba; s_v_web_id=verify_m4b1lhlu_DI8qKRlD_7mJJ_4eqx_9shQ_s8eS2QLAbc4n; passport_csrf_token=86f3619c0c4a9c13f24117f71dc18524; passport_csrf_token_default=86f3619c0c4a9c13f24117f71dc18524; n_mh=9-mIeuD4wZnlYrrOvfzG3MuT6aQmCUtmr8FxV8Kl8xY; sid_guard=a7eb745aec44bb3186dbc2083ea9e1a6%7C1733386629%7C5184000%7CMon%2C+03-Feb-2025+08%3A17%3A09+GMT; uid_tt=59a46c7d3f34bda9588b93590cca2e12; uid_tt_ss=59a46c7d3f34bda9588b93590cca2e12; sid_tt=a7eb745aec44bb3186dbc2083ea9e1a6; sessionid=a7eb745aec44bb3186dbc2083ea9e1a6; sessionid_ss=a7eb745aec44bb3186dbc2083ea9e1a6; is_staff_user=false; sid_ucp_v1=1.0.0-KGRiOGY2ODQyNWU1OTk3NzRhYTE2ZmZhYmFjNjdmYjY3NzRmZGRiZTgKHgjToPCw0cwbEIXDxboGGJ-tHyAMMITDxboGOAhAJhoCaGwiIGE3ZWI3NDVhZWM0NGJiMzE4NmRiYzIwODNlYTllMWE2; ssid_ucp_v1=1.0.0-KGRiOGY2ODQyNWU1OTk3NzRhYTE2ZmZhYmFjNjdmYjY3NzRmZGRiZTgKHgjToPCw0cwbEIXDxboGGJ-tHyAMMITDxboGOAhAJhoCaGwiIGE3ZWI3NDVhZWM0NGJiMzE4NmRiYzIwODNlYTllMWE2; store-region=cn-gd; store-region-src=uid; user_spaces_idc={\"7444764277623653426\":\"lf\"}; ttwid=1|cxHJViEev1mfkjntdMziir8SwbU8uPNVSaeh9QpEUs8|1733966961|d8d52f5f56607427691be4ac44253f7870a34d25dd05a01b4d89b8a7c5ea82ad; _tea_web_id=7444838473275573797; fpk1=fa6c6a4d9ba074b90003896f36b6960066521c1faec6a60bdcb69ec8ddf85e8360b4c0704412848ec582b2abca73d57a; odin_tt=efe9dc150207879b88509e651a1c4af4e7ffb4cfcb522425a75bd72fbf894eda570bbf7ffb551c8b1de0aa2bfa0bd1be6c4157411ecdcf4464fcaf8dd6657d66',\n      Referer: \"https://jimeng.jianying.com/ai-tool/image/generate\",\n      // \"Device-Time\": 1733966964,\n      // Sign: \"f3dbb824b378abea7c03cbb152b3a365\"\n    }\n  });\n  logger.info(`\\n积分信息: \\n赠送积分: ${gift_credit}, 购买积分: ${purchase_credit}, VIP积分: ${vip_credit}`);\n  return {\n    giftCredit: gift_credit,\n    purchaseCredit: purchase_credit,\n    vipCredit: vip_credit,\n    totalCredit: gift_credit + purchase_credit + vip_credit\n  }\n}\n\n/**\n * 接收今日积分\n *\n * @param refreshToken 用于刷新access_token的refresh_token\n */\nexport async function receiveCredit(refreshToken: string) {\n  logger.info(\"正在收取今日积分...\")\n  const { cur_total_credits, receive_quota  } = await request(\"POST\", \"/commerce/v1/benefits/credit_receive\", refreshToken, {\n    data: {\n      time_zone: \"Asia/Shanghai\"\n    },\n    headers: {\n      Referer: \"https://jimeng.jianying.com/ai-tool/image/generate\"\n    }\n  });\n  logger.info(`\\n今日${receive_quota}积分收取成功\\n剩余积分: ${cur_total_credits}`);\n  return cur_total_credits;\n}\n\n/**\n * 请求jimeng\n *\n * @param method 请求方法\n * @param uri 请求路径\n * @param params 请求参数\n * @param headers 请求头\n */\nexport async function request(\n  method: string,\n  uri: string,\n  refreshToken: string,\n  options: AxiosRequestConfig = {}\n) {\n  const token = await acquireToken(refreshToken);\n  const deviceTime = util.unixTimestamp();\n  const sign = util.md5(\n    `9e2c|${uri.slice(-7)}|${PLATFORM_CODE}|${VERSION_CODE}|${deviceTime}||11ac`\n  );\n  \n  const cookie = generateCookie(token);\n  const xWebSecsdkUid = util.uuid();\n  const sVWebId = `verify_${util.uuid()}`;\n  const passportCsrfToken = util.md5(util.uuid());\n  \n  const response = await axios.request({\n    method,\n    url: `https://jimeng.jianying.com${uri}`,\n    params: {\n      aid: DEFAULT_ASSISTANT_ID,\n      device_platform: \"web\",\n      region: \"CN\",\n      web_id: WEB_ID,\n      ...(options.params || {}),\n    },\n    headers: {\n      ...FAKE_HEADERS,\n      Cookie: cookie,\n      \"Device-Time\": deviceTime,\n      Sign: sign,\n      \"Sign-Ver\": \"1\",\n      \"x-web-secsdk-uid\": xWebSecsdkUid,\n      \"s_v_web_id\": sVWebId,\n      \"passport_csrf_token\": passportCsrfToken,\n      \"passport_csrf_token_default\": passportCsrfToken,\n      \"n_mh\": util.md5(util.uuid()),\n      \"sid_ucp_v1\": cookie.split(\"sid_ucp_v1=\")[1]?.split(\";\")[0] || \"\",\n      \"ssid_ucp_v1\": cookie.split(\"ssid_ucp_v1=\")[1]?.split(\";\")[0] || \"\",\n      \"ttwid\": cookie.split(\"ttwid=\")[1]?.split(\";\")[0] || \"\",\n      \"fpk1\": cookie.split(\"fpk1=\")[1]?.split(\";\")[0] || \"\",\n      \"odin_tt\": cookie.split(\"odin_tt=\")[1]?.split(\";\")[0] || \"\",\n      ...(options.headers || {}),\n    },\n    timeout: 15000,\n    validateStatus: () => true,\n    ..._.omit(options, \"params\", \"headers\"),\n  });\n  // 流式响应直接返回response\n  if (options.responseType == \"stream\") return response;\n  return checkResult(response);\n}\n\n/**\n * 预检查文件URL有效性\n *\n * @param fileUrl 文件URL\n */\nexport async function checkFileUrl(fileUrl: string) {\n  if (util.isBASE64Data(fileUrl)) return;\n  const result = await axios.head(fileUrl, {\n    timeout: 15000,\n    validateStatus: () => true,\n  });\n  if (result.status >= 400)\n    throw new APIException(\n      EX.API_FILE_URL_INVALID,\n      `File ${fileUrl} is not valid: [${result.status}] ${result.statusText}`\n    );\n  // 检查文件大小\n  if (result.headers && result.headers[\"content-length\"]) {\n    const fileSize = parseInt(result.headers[\"content-length\"], 10);\n    if (fileSize > FILE_MAX_SIZE)\n      throw new APIException(\n        EX.API_FILE_EXECEEDS_SIZE,\n        `File ${fileUrl} is not valid`\n      );\n  }\n}\n\n/**\n * 上传文件\n *\n * @param fileUrl 文件URL\n * @param refreshToken 用于刷新access_token的refresh_token\n * @param isVideoImage 是否是用于视频图像\n */\nexport async function uploadFile(\n  fileUrl: string,\n  refreshToken: string,\n  isVideoImage: boolean = false\n) {\n  // 预检查远程文件URL可用性\n  await checkFileUrl(fileUrl);\n\n  let filename, fileData, mimeType;\n  // 如果是BASE64数据则直接转换为Buffer\n  if (util.isBASE64Data(fileUrl)) {\n    mimeType = util.extractBASE64DataFormat(fileUrl);\n    const ext = mime.getExtension(mimeType);\n    filename = `${util.uuid()}.${ext}`;\n    fileData = Buffer.from(util.removeBASE64DataHeader(fileUrl), \"base64\");\n  }\n  // 下载文件到内存，如果您的服务器内存很小，建议考虑改造为流直传到下一个接口上，避免停留占用内存\n  else {\n    filename = path.basename(fileUrl);\n    ({ data: fileData } = await axios.get(fileUrl, {\n      responseType: \"arraybuffer\",\n      // 100M限制\n      maxContentLength: FILE_MAX_SIZE,\n      // 60秒超时\n      timeout: 60000,\n    }));\n  }\n\n  // 获取文件的MIME类型\n  mimeType = mimeType || mime.getType(filename);\n\n  // 待开发\n}\n\n/**\n * 检查请求结果\n *\n * @param result 结果\n */\nexport function checkResult(result: AxiosResponse) {\n  const { ret, errmsg, data } = result.data;\n  if (!_.isFinite(Number(ret))) return result.data;\n  if (ret === '0') return data;\n  if (ret === '5000')\n    throw new APIException(EX.API_IMAGE_GENERATION_INSUFFICIENT_POINTS, `[无法生成图像]: 即梦积分可能不足，${errmsg}`);\n  throw new APIException(EX.API_REQUEST_FAILED, `[请求jimeng失败]: ${errmsg}`);\n}\n\n/**\n * Token切分\n *\n * @param authorization 认证字符串\n */\nexport function tokenSplit(authorization: string) {\n  return authorization.replace(\"Bearer \", \"\").split(\",\");\n}\n\n/**\n * 获取Token存活状态\n */\nexport async function getTokenLiveStatus(refreshToken: string) {\n  const result = await request(\n    \"POST\",\n    \"/passport/account/info/v2\",\n    refreshToken,\n    {\n      params: {\n        account_sdk_source: \"web\",\n      },\n    }\n  );\n  try {\n    const { user_id } = checkResult(result);\n    return !!user_id;\n  } catch (err) {\n    return false;\n  }\n}","import _ from \"lodash\";\n\nimport APIException from \"@/lib/exceptions/APIException.ts\";\nimport EX from \"@/api/consts/exceptions.ts\";\nimport util from \"@/lib/util.ts\";\nimport { getCredit, receiveCredit, request } from \"./core.ts\";\nimport logger from \"@/lib/logger.ts\";\n\nconst DEFAULT_ASSISTANT_ID = \"513695\";\nexport const DEFAULT_MODEL = \"jimeng-3.0\";\nconst DRAFT_VERSION = \"3.0.2\";\nconst MODEL_MAP = {\n  \"jimeng-3.0\": \"high_aes_general_v30l:general_v3.0_18b\",\n  \"jimeng-2.1\": \"high_aes_general_v21_L:general_v2.1_L\",\n  \"jimeng-2.0-pro\": \"high_aes_general_v20_L:general_v2.0_L\",\n  \"jimeng-2.0\": \"high_aes_general_v20:general_v2.0\",\n  \"jimeng-1.4\": \"high_aes_general_v14:general_v1.4\",\n  \"jimeng-xl-pro\": \"text2img_xl_sft\",\n};\n\nexport function getModel(model: string) {\n  return MODEL_MAP[model] || MODEL_MAP[DEFAULT_MODEL];\n}\n\nexport async function generateImages(\n  _model: string,\n  prompt: string,\n  {\n    width = 1024,\n    height = 1024,\n    sampleStrength = 0.5,\n    negativePrompt = \"\",\n  }: {\n    width?: number;\n    height?: number;\n    sampleStrength?: number;\n    negativePrompt?: string;\n  },\n  refreshToken: string\n) {\n  const model = getModel(_model);\n  logger.info(`使用模型: ${_model} 映射模型: ${model} ${width}x${height} 精细度: ${sampleStrength}`);\n\n  const { totalCredit } = await getCredit(refreshToken);\n  if (totalCredit <= 0)\n    await receiveCredit(refreshToken);\n\n  const componentId = util.uuid();\n  const { aigc_data } = await request(\n    \"post\",\n    \"/mweb/v1/aigc_draft/generate\",\n    refreshToken,\n    {\n      params: {\n        babi_param: encodeURIComponent(\n          JSON.stringify({\n            scenario: \"image_video_generation\",\n            feature_key: \"aigc_to_image\",\n            feature_entrance: \"to_image\",\n            feature_entrance_detail: \"to_image-\" + model,\n          })\n        ),\n      },\n      data: {\n        extend: {\n          root_model: model,\n          template_id: \"\",\n        },\n        submit_id: util.uuid(),\n        metrics_extra: JSON.stringify({\n          templateId: \"\",\n          generateCount: 1,\n          promptSource: \"custom\",\n          templateSource: \"\",\n          lastRequestId: \"\",\n          originRequestId: \"\",\n        }),\n        draft_content: JSON.stringify({\n          type: \"draft\",\n          id: util.uuid(),\n          min_version: DRAFT_VERSION,\n          is_from_tsn: true,\n          version: DRAFT_VERSION,\n          main_component_id: componentId,\n          component_list: [\n            {\n              type: \"image_base_component\",\n              id: componentId,\n              min_version: DRAFT_VERSION,\n              generate_type: \"generate\",\n              aigc_mode: \"workbench\",\n              abilities: {\n                type: \"\",\n                id: util.uuid(),\n                generate: {\n                  type: \"\",\n                  id: util.uuid(),\n                  core_param: {\n                    type: \"\",\n                    id: util.uuid(),\n                    model,\n                    prompt,\n                    negative_prompt: negativePrompt,\n                    seed: Math.floor(Math.random() * 100000000) + 2500000000,\n                    sample_strength: sampleStrength,\n                    image_ratio: 1,\n                    large_image_info: {\n                      type: \"\",\n                      id: util.uuid(),\n                      height,\n                      width,\n                    },\n                  },\n                  history_option: {\n                    type: \"\",\n                    id: util.uuid(),\n                  },\n                },\n              },\n            },\n          ],\n        }),\n        http_common_info: {\n          aid: Number(DEFAULT_ASSISTANT_ID),\n        },\n      },\n    }\n  );\n  const historyId = aigc_data.history_record_id;\n  console.log('Generated historyId:', historyId);\n\n  if (!historyId) {\n    throw new APIException(EX.API_IMAGE_GENERATION_FAILED, '生成ID获取失败');\n  }\n  return { \n    historyId: aigc_data.history_record_id \n  };\n}\n\nexport async function getImageByHistoryId(historyId: string, refreshToken: string) {\n  const result = await request(\n    \"post\",\n    \"/mweb/v1/get_history_by_ids\",\n    refreshToken,\n    {\n      data: {\n        history_ids: [historyId],\n        image_info: { width: 2048, height: 2048, format: \"webp\" },\n        http_common_info: { aid: Number(DEFAULT_ASSISTANT_ID) }\n      }\n    }\n  );\n\n  if (!result[historyId]) {\n    throw new APIException(EX.API_IMAGE_GENERATION_FAILED, \"历史记录不存在\");\n  }\n\n  const item_list = result[historyId].item_list || [];\n\n  return {\n    images: item_list.map(item => ({\n      webp: item?.common_attr?.cover_url_map?.[\"2400\"] || \"\",\n      jpeg: item?.image?.large_images?.[0]?.image_url || \"\",\n      cover_1: item?.common_attr?.cover_url_map?.[\"1080\"] || \"\",\n      cover_2: item?.common_attr?.cover_url || \"\"\n    }))\n  };\n}\n\nexport default {\n  generateImages,\n  getImageByHistoryId,\n};\n","import _ from 'lodash';\n\nimport Request from '@/lib/request/Request.ts';\nimport Response from '@/lib/response/Response.ts';\nimport { tokenSplit } from '@/api/controllers/core.ts';\nimport { createCompletion, createCompletionStream } from '@/api/controllers/chat.ts';\n\nexport default {\n\n    prefix: '/v1/chat',\n\n    post: {\n\n        '/completions': async (request: Request) => {\n            request\n                .validate('body.model', v => _.isUndefined(v) || _.isString(v))\n                .validate('body.messages', _.isArray)\n                .validate('headers.authorization', _.isString)\n            // refresh_token切分\n            const tokens = tokenSplit(request.headers.authorization);\n            // 随机挑选一个refresh_token\n            const token = _.sample(tokens);\n            const { model, messages, stream } = request.body;\n            if (stream) {\n                const stream = await createCompletionStream(messages, token, model);\n                return new Response(stream, {\n                    type: \"text/event-stream\"\n                });\n            }\n            else\n                return await createCompletion(messages, token, model);\n        }\n\n    }\n\n}","import _ from \"lodash\";\nimport { PassThrough } from \"stream\";\n\nimport APIException from \"@/lib/exceptions/APIException.ts\";\nimport EX from \"@/api/consts/exceptions.ts\";\nimport logger from \"@/lib/logger.ts\";\nimport util from \"@/lib/util.ts\";\nimport { generateImages, DEFAULT_MODEL } from \"./images.ts\";\n\n// 最大重试次数\nconst MAX_RETRY_COUNT = 3;\n// 重试延迟\nconst RETRY_DELAY = 5000;\n\n/**\n * 解析模型\n *\n * @param model 模型名称\n * @returns 模型信息\n */\nfunction parseModel(model: string) {\n  const [_model, size] = model.split(\":\");\n  const [_, width, height] = /(\\d+)[\\W\\w](\\d+)/.exec(size) ?? [];\n  return {\n    model: _model,\n    width: size ? Math.ceil(parseInt(width) / 2) * 2 : 1024,\n    height: size ? Math.ceil(parseInt(height) / 2) * 2 : 1024,\n  };\n}\n\n/**\n * 同步对话补全\n *\n * @param messages 参考gpt系列消息格式，多轮对话请完整提供上下文\n * @param refreshToken 用于刷新access_token的refresh_token\n * @param assistantId 智能体ID，默认使用jimeng原版\n * @param retryCount 重试次数\n */\nexport async function createCompletion(\n  messages: any[],\n  refreshToken: string,\n  _model = DEFAULT_MODEL,\n  retryCount = 0\n) {\n  return (async () => {\n    if (messages.length === 0)\n      throw new APIException(EX.API_REQUEST_PARAMS_INVALID, \"消息不能为空\");\n\n    const { model, width, height } = parseModel(_model);\n    logger.info(messages);\n\n    const imageUrls = await generateImages(\n      model,\n      messages[messages.length - 1].content,\n      {\n        width,\n        height,\n      },\n      refreshToken\n    );\n\n    return {\n      id: util.uuid(),\n      model: _model || model,\n      object: \"chat.completion\",\n      choices: [\n        {\n          index: 0,\n          message: {\n            role: \"assistant\",\n            content: imageUrls.reduce(\n              (acc, url, i) => acc + `![image_${i}](${url})\\n`,\n              \"\"\n            ),\n          },\n          finish_reason: \"stop\",\n        },\n      ],\n      usage: { prompt_tokens: 1, completion_tokens: 1, total_tokens: 2 },\n      created: util.unixTimestamp(),\n    };\n  })().catch((err) => {\n    if (retryCount < MAX_RETRY_COUNT) {\n      logger.error(`Response error: ${err.stack}`);\n      logger.warn(`Try again after ${RETRY_DELAY / 1000}s...`);\n      return (async () => {\n        await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY));\n        return createCompletion(messages, refreshToken, _model, retryCount + 1);\n      })();\n    }\n    throw err;\n  });\n}\n\n/**\n * 流式对话补全\n *\n * @param messages 参考gpt系列消息格式，多轮对话请完整提供上下文\n * @param refreshToken 用于刷新access_token的refresh_token\n * @param assistantId 智能体ID，默认使用jimeng原版\n * @param retryCount 重试次数\n */\nexport async function createCompletionStream(\n  messages: any[],\n  refreshToken: string,\n  _model = DEFAULT_MODEL,\n  retryCount = 0\n) {\n  return (async () => {\n    const { model, width, height } = parseModel(_model);\n    logger.info(messages);\n\n    const stream = new PassThrough();\n\n    if (messages.length === 0) {\n      logger.warn(\"消息为空，返回空流\");\n      stream.end(\"data: [DONE]\\n\\n\");\n      return stream;\n    }\n\n    stream.write(\n      \"data: \" +\n        JSON.stringify({\n          id: util.uuid(),\n          model: _model || model,\n          object: \"chat.completion.chunk\",\n          choices: [\n            {\n              index: 0,\n              delta: { role: \"assistant\", content: \"🎨 图像生成中，请稍候...\" },\n              finish_reason: null,\n            },\n          ],\n        }) +\n        \"\\n\\n\"\n    );\n\n    generateImages(\n      model,\n      messages[messages.length - 1].content,\n      { width, height },\n      refreshToken\n    )\n      .then((imageUrls) => {\n        for (let i = 0; i < imageUrls.length; i++) {\n          const url = imageUrls[i];\n          stream.write(\n            \"data: \" +\n              JSON.stringify({\n                id: util.uuid(),\n                model: _model || model,\n                object: \"chat.completion.chunk\",\n                choices: [\n                  {\n                    index: i + 1,\n                    delta: {\n                      role: \"assistant\",\n                      content: `![image_${i}](${url})\\n`,\n                    },\n                    finish_reason: i < imageUrls.length - 1 ? null : \"stop\",\n                  },\n                ],\n              }) +\n              \"\\n\\n\"\n          );\n        }\n        stream.write(\n          \"data: \" +\n            JSON.stringify({\n              id: util.uuid(),\n              model: _model || model,\n              object: \"chat.completion.chunk\",\n              choices: [\n                {\n                  index: imageUrls.length + 1,\n                  delta: {\n                    role: \"assistant\",\n                    content: \"图像生成完成！\",\n                  },\n                  finish_reason: \"stop\",\n                },\n              ],\n            }) +\n            \"\\n\\n\"\n        );\n        stream.end(\"data: [DONE]\\n\\n\");\n      })\n      .catch((err) => {\n        stream.write(\n          \"data: \" +\n            JSON.stringify({\n              id: util.uuid(),\n              model: _model || model,\n              object: \"chat.completion.chunk\",\n              choices: [\n                {\n                  index: 1,\n                  delta: {\n                    role: \"assistant\",\n                    content: `生成图片失败: ${err.message}`,\n                  },\n                  finish_reason: \"stop\",\n                },\n              ],\n            }) +\n            \"\\n\\n\"\n        );\n        stream.end(\"data: [DONE]\\n\\n\");\n      });\n    return stream;\n  })().catch((err) => {\n    if (retryCount < MAX_RETRY_COUNT) {\n      logger.error(`Response error: ${err.stack}`);\n      logger.warn(`Try again after ${RETRY_DELAY / 1000}s...`);\n      return (async () => {\n        await new Promise((resolve) => setTimeout(resolve, RETRY_DELAY));\n        return createCompletionStream(\n          messages,\n          refreshToken,\n          _model,\n          retryCount + 1\n        );\n      })();\n    }\n    throw err;\n  });\n}\n","export default {\n  prefix: '/ping',\n  get: {\n    '': async () => \"pong\"\n  }\n}","import _ from 'lodash';\n\nimport Request from '@/lib/request/Request.ts';\nimport Response from '@/lib/response/Response.ts';\nimport { getTokenLiveStatus, getCredit, tokenSplit } from '@/api/controllers/core.ts';\nimport logger from '@/lib/logger.ts';\n\nexport default {\n\n    prefix: '/token',\n\n    post: {\n\n        '/check': async (request: Request) => {\n            request\n                .validate('body.token', _.isString)\n            const live = await getTokenLiveStatus(request.body.token);\n            return {\n                live\n            }\n        },\n\n        '/points': async (request: Request) => {\n            request\n                .validate('headers.authorization', _.isString)\n            // refresh_token切分\n            const tokens = tokenSplit(request.headers.authorization);\n            const points = await Promise.all(tokens.map(async (token) => {\n                return {\n                    token,\n                    points: await getCredit(token)\n                }\n            }))\n            return points;\n        }\n\n    }\n\n}","import _ from 'lodash';\n\nexport default {\n\n    prefix: '/v1',\n\n    get: {\n        '/models': async () => {\n            return {\n                \"data\": [\n                    {\n                        \"id\": \"jimeng\",\n                        \"object\": \"model\",\n                        \"owned_by\": \"jimeng-free-api\"\n                    }\n                ]\n            };\n        }\n\n    }\n}","\"use strict\";\n\nimport environment from \"@/lib/environment.ts\";\nimport config from \"@/lib/config.ts\";\nimport \"@/lib/initialize.ts\";\nimport server from \"@/lib/server.ts\";\nimport routes from \"@/api/routes/index.ts\";\nimport logger from \"@/lib/logger.ts\";\n\nconst startupTime = performance.now();\n\n(async () => {\n  logger.header();\n\n  logger.info(\"<<<< jimeng free server >>>>\");\n  logger.info(\"Version:\", environment.package.version);\n  logger.info(\"Process id:\", process.pid);\n  logger.info(\"Environment:\", environment.env);\n  logger.info(\"Service name:\", config.service.name);\n\n  server.attachRoutes(routes);\n  await server.listen();\n\n  config.service.bindAddress &&\n    logger.success(\"Service bind address:\", config.service.bindAddress);\n})()\n  .then(() =>\n    logger.success(\n      `Service startup completed (${Math.floor(performance.now() - startupTime)}ms)`\n    )\n  )\n  .catch((err) => console.error(err));\n"],"mappings":"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","names":["minimist","cmdArgs","envVars","_","fs","path","import_path","import_fs_extra","import_lodash","import_path","import_fs_extra","import_lodash","_","uuid","randomstring","mime","path","dateFormat","os","fs","crypto","CRC32","axios","path","_","fs","yaml","import_path","import_fs_extra","import_yaml","import_lodash","CONFIG_PATH","path","_","fs","yaml","import_path","import_util","import_colors","import_lodash","import_fs_extra","import_date_fns","fs","path","_util","_","dateFormat","_","import_lodash","import_lodash","import_lodash","assert","_","_","import_mime","import_lodash","import_lodash","_","_","mime","import_lodash","exceptions_default","_","exceptions_default","Koa","koaCors","koaRange","KoaRouter","koaBody","_","request","response","err","import_fs_extra","import_lodash","import_lodash","import_mime","import_axios","axios","_","_","DEFAULT_ASSISTANT_ID","request","_","import_lodash","import_stream","_","request","_","stream","import_lodash","request","_","fs"]}